package com.chocolatemod.integration;

import growthcraft.core.common.GrcModuleBase;
import growthcraft.core.util.Platform;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModContainer;

/**
 * Base class for integrating other mods with Growthcraft, this idea was
 * taken from AE2.
 */
public abstract class ModIntegrationBase extends GrcModuleBase
{
	public final String parentModID;
	public final String modID;
	private boolean modLoaded;

	public ModIntegrationBase(String parentMod, String integratingMod)
	{
		this.parentModID = parentMod;
		this.modID = integratingMod;
	}

	public boolean modIsLoaded()
	{
		return modLoaded;
	}

	public String getModTag()
	{
		final ModContainer cont = FMLCommonHandler.instance().findContainerFor(modID);
		return String.format("%s [%s]", modID, cont != null ? cont.getVersion() : "NOT LOADED");
	}

	protected void doPreInit()
	{

	}

	@Override
	public final void preInit()
	{
		this.modLoaded = Loader.isModLoaded(modID);
		if (modIsLoaded())
		{
			logger.debug("preInit " + getModTag());
			doPreInit();
		}
	}

	protected void doInit()
	{

	}

	@Override
	public final void init()
	{
		if (modIsLoaded())
		{
			logger.debug("init " + getModTag());
			doInit();
		}
	}

	// Normally called directly after a preInit, use this method to register
	// blocks and items, DO NOT REGISTER RECIPES HERE, use doLateRegister
	// instead for recipes.
	protected void doRegister()
	{

	}

	@Override
	public final void register()
	{
		if (modIsLoaded())
		{
			logger.debug("register " + getModTag());
			doRegister();
		}
	}

	protected void doPostInit()
	{

	}

	// Called directly after doPostInit(), use this step for registering recipes
	// or other things that use items OUTSIDE the current mod
	protected void doLateRegister()
	{

	}

	@Override
	public final void postInit()
	{
		if (modIsLoaded())
		{
			logger.debug("postInit " + getModTag());
			doPostInit();
			doLateRegister();
		}

		// This method is kept around for reasons, you should use the
		// IModule "do" methods instead
		tryToIntegrate();
	}

	/**
	 * Implement this method
	 */
	protected void integrate()
	{
	}

	protected void integrateClient()
	{
	}

	protected void integrateServer()
	{
	}

	public void tryToIntegrate()
	{
		if (modIsLoaded())
		{
			logger.debug("Attemping to integrate with %s.", getModTag());
			try
			{
				if (Platform.isClient())
				{
					integrateClient();
				}
				else
				{
					integrateServer();
				}
				integrate();
				logger.debug("Successfully integrated with %s.", getModTag());
			}
			catch (Exception e)
			{
				logger.warn("%s integration failed.", getModTag());
			}
		}
		else
		{
			logger.debug("%s not found; No integration made.", getModTag());
		}
	}
}